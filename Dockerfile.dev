# PDF Splitter API Development Dockerfile
# Optimized for development with hot-reloading and debugging

FROM python:3.12-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Build tools
    build-essential \
    gcc \
    g++ \
    git \
    # Image processing
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgthread-2.0-0 \
    # PDF processing
    libpoppler-cpp-dev \
    libpoppler-dev \
    poppler-utils \
    # Development tools
    curl \
    vim \
    less \
    htop \
    # Clean up
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Install Python development tools
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir \
        ipython \
        ipdb \
        pytest \
        pytest-cov \
        pytest-asyncio \
        pytest-mock \
        black \
        isort \
        flake8 \
        mypy \
        pre-commit

# Copy requirements and install
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy development requirements if exists
COPY requirements-dev.txt* ./
RUN if [ -f requirements-dev.txt ]; then pip install --no-cache-dir -r requirements-dev.txt; fi

# Set environment variables for development
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DEBUG=true \
    RELOAD=true \
    LOG_LEVEL=DEBUG \
    API_WORKERS=1

# Create necessary directories
RUN mkdir -p /data/uploads /data/outputs /data/sessions /data/cache /data/logs

# Copy application code (will be mounted as volume in docker-compose)
COPY . .

# Expose ports
EXPOSE 8000 5678

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
    CMD curl -f http://localhost:8000/api/health || exit 1

# Development entrypoint with hot-reloading
CMD ["uvicorn", "pdf_splitter.api.main:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--reload", \
     "--reload-dir", "pdf_splitter", \
     "--log-level", "debug"]
